{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["App","state","item","items","handleInputChange","bind","sumbitItem","this","push","setState","event","name","target","value","className","type","onChange","onClick","map","React","Component","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"2PAqDeA,E,kDAjDb,aAAe,IAAD,8BACZ,gBAEKC,MAAQ,CACXC,KAAM,GACNC,MAAO,IAGT,EAAKC,kBAAoB,EAAKA,kBAAkBC,KAAvB,gBACzB,EAAKC,WAAa,EAAKA,WAAWD,KAAhB,gBATN,E,8CAYd,WACE,IAAIH,EAAOK,KAAKN,MAAMC,KAClBC,EAAQI,KAAKN,MAAME,MAEvBA,EAAMK,KAAKN,GAEXK,KAAKE,SAAS,CAAEN,MAAOA,M,+BAGzB,SAAkBO,GAChB,IAAIC,EAAOD,EAAME,OAAOD,KACpBE,EAAQH,EAAME,OAAOC,MAEzBN,KAAKE,SAAL,eAAiBE,EAAOE,M,oBAG1B,WACE,OACE,sBAAKC,UAAU,MAAf,UACE,4CAEA,uBACEC,KAAK,OACLJ,KAAK,OACLK,SAAUT,KAAKH,oBAGjB,wBAAQa,QAASV,KAAKD,WAAtB,wBAECC,KAAKN,MAAME,MAAMe,KAAI,SAAChB,GACrB,OAAO,4BAAIA,c,GA3CHiB,IAAMC,WCSTC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.7acde7d1.chunk.js","sourcesContent":["import \"./App.css\";\nimport React from \"react\";\n\nclass App extends React.Component {\n  constructor() {\n    super();\n\n    this.state = {\n      item: \"\",\n      items: [], //\n    };\n\n    this.handleInputChange = this.handleInputChange.bind(this);\n    this.sumbitItem = this.sumbitItem.bind(this);\n  }\n\n  sumbitItem() {\n    let item = this.state.item;\n    let items = this.state.items;\n\n    items.push(item);\n\n    this.setState({ items: items });\n  }\n\n  handleInputChange(event) {\n    let name = event.target.name;\n    let value = event.target.value;\n\n    this.setState({ [name]: value });\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <h2>TO DO LIST</h2>\n\n        <input\n          type=\"text\"\n          name=\"item\"\n          onChange={this.handleInputChange}\n        ></input>\n\n        <button onClick={this.sumbitItem}>Sumbit it!</button>\n\n        {this.state.items.map((item) => {\n          return <p>{item}</p>;\n        })}\n      </div>\n    );\n  }\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}